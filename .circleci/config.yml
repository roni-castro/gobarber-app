
version: 2.1
jobs:
  node:
    working_directory: ~/gobarber
    docker:
      - image: cimg/node:12.16

    steps:
      - checkout

      # Restore the yarn cache, in case it exists.
      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

      # Restore the node_modules cache, in case it exists.
      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}

      # Install the dependecies
      - run: yarn install

      # Update the yarn cache in case yarn.lock was changed
      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn
      # Update the node cache in case a new module was installed, which changed the package.json
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules

      - run:
          name: jest tests
          command: |
            mkdir -p test-results/jest
            yarn run test
          environment:
            JEST_JUNIT_OUTPUT: test-results/jest/junit.xml

      - persist_to_workspace:
          root: ~/gobarber
          paths:
            - node_modules

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results

  macos-build-and-test:
    working_directory: ~/gobarber
    macos:
      xcode: 11.3.0
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: test

    steps:
      - checkout
      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}

      - run: yarn install

      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules

      - restore_cache:
          key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}

      #Pods directory is ignored to match default RN setup, but can also check them into source control
      #https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
      - restore_cache:
          key: pods-v1-{{ checksum "ios/Podfile.lock" }}-{{ arch }}

      - run: 
          command: pod install
          working_directory: ios

      - run: 
          command: bundle install
          working_directory: ios

      - save_cache:
          key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}
          paths:
            - vendor/bundle

      - save_cache:
          key: pods-v1-{{ checksum "ios/Podfile.lock" }}-{{ arch }}
          paths:
            - ios/Pods

      - run:
          name: Fastlane
          command: bundle exec fastlane $FASTLANE_LANE
          working_directory: ios

      - store_artifacts:
          path: output
          
      - store_test_results:
          path: output/scan
            
  android-release_aab_alpha:
    working_directory: ~/gobarber/android
    docker:
      - image: circleci/android:api-29-node
    steps:
      - checkout:
          path: ~/gobarber

      - attach_workspace:
          at: ~/gobarber

      # Restore Gemfile cache, in case it exits
      - restore_cache:
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
      
      - run:
          name: Update rubygems-update and install bundler dependency
          command: |
            gem update --system
            gem install bundler

      # Run bundle install to install all gems of Gemfile
      - run: bundle install

      # Update Gemfile cache, in case Gemfile.lock was updated because of a new fastlane version or any other gem
      - save_cache:
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
          paths:
            - vendor/bundle

      - run:
          name: Generate Android keystore by decoding base64 to production.keystore
          command: echo $MYAPP_KEYSTORE_BASE64 | base64 -di | tee production.keystore app/production.keystore >/dev/null

      - run:
          name: Deploy .aab to Playstore Alpha
          command: |
            bundle exec fastlane alpha_aab
      # Store .aab on CircleCi
      - store_artifacts:
          path: app/build/outputs/bundle/release/app-release.aab

  android-promote_alpha_to_beta:
    working_directory: ~/gobarber/android
    docker:
      - image: circleci/android:api-29-node
    steps:
      - checkout:
          path: ~/gobarber

      - attach_workspace:
          at: ~/gobarber

      # Restore Gemfile cache, in case it exits
      - restore_cache:
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}

      # Run bundle install to install all gems of Gemfile
      - run: bundle install

      # Update Gemfile cache, in case Gemfile.lock was updated because of a new fastlane version or any other gem
      - save_cache:
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
          paths:
            - vendor/bundle

      - run:
          name: Promote .aab from PlayStore Alpha to Beta track
          command: |
            bundle exec fastlane promote_alpha_to_beta

workflows:
  node-android-ios:
    jobs:
      - node
      - android-hold:
          type: approval
      - android-release_aab_alpha:
          requires:
            - node
      - android-promote_alpha_to_beta:
          requires:
            - android-hold
      - macos-build-and-test:
          requires:
            - node
            